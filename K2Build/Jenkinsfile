pipeline {
    agent any
    options {
        disableConcurrentBuilds()
        buildDiscarder(logRotator(numToKeepStr: '20'))
    }
    triggers {
        pollSCM('* * * * *')
        upstream(upstreamProjects: "dfv_k2_devtools, dfv_k2_seastar, dfv_k2_hot", threshold: hudson.model.Result.SUCCESS)
    }
    stages {
        stage('Checkout') {
            agent {label "builder"}
            steps {
                echo "\u2600 Getting source"
                // Get code
                checkout([$class: 'GitSCM',
                          branches: [[name: '*/master']],
                          doGenerateSubmoduleConfigurations: false,
                          extensions: [[$class: 'SubmoduleOption', disableSubmodules: false, parentCredentials: true, recursiveSubmodules: true, reference: '', trackingSubmodules: false]],
                          submoduleCfg: [],
                          userRemoteConfigs: [[credentialsId: 'fb82a473-e4f4-4f14-b0d5-0f28af79d0ca', url: 'ssh://git@ssh-gitlab.futurewei.com:30022/k2/dfv_k2_platform.git']]
                        ])
            }
        }
        stage('Build Builder Image') {
            options { skipDefaultCheckout() }
            agent {label "builder"}
            steps {
                echo "\u2600 Building Docker Builder Image"
                sh "make -C K2Build builder_img_build"
                sh "make -C K2Build builder_img_push"
            }
        }
        stage('Build') {
            options { skipDefaultCheckout() }
            agent {label "builder"}
            steps {
                echo "\u2600 Build"
                sh "./K2Build/k2build make -j -C K2Build"
            }
        }
        stage('Test') {
            options { skipDefaultCheckout() }
            agent {label "builder"}
            steps {
                echo "\u2600 Run K2 Platform Integration Test"
                sh "./K2Build/k2build make -j -C K2Build test"
                sh "./K2Build/k2build make -j -C K2Build integrate"
            }
        }
        stage('Install') {
            options { skipDefaultCheckout() }
            agent {label "builder"}
            steps {
                echo "\u2600 Install"
                sh "./K2Build/k2build make -j -C K2Build install"
            }
        }
        stage('Package') {
            options { skipDefaultCheckout() }
            agent {label "builder"}
            steps {
                echo "\u2600 Package"
                sh "./K2Build/k2build make -C K2Build package_deb"
                sh "./K2Build/k2build make -C K2Build package_rpm"
            }
        }
        stage('Upload artifacts') {
            options { skipDefaultCheckout() }
            agent {label "builder"}
            steps {
                echo "\u2600 Uploading artifacts"
                sh "./K2Build/k2build make -C K2Build package_push_deb"
                sh "./K2Build/k2build make -C K2Build package_push_rpm"
            }
        }
    }
}
